{"created": 1649924364.382564, "duration": 0.27499985694885254, "exitcode": 1, "root": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more", "environment": {"Python": "3.8.13", "Platform": "Windows-10-10.0.19043-SP0", "Packages": {"pytest": "6.2.2", "py": "1.10.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.5.0", "metadata": "2.0.1", "submit": "1.3.3"}}, "summary": {"failed": 13, "total": 13, "collected": 13}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/conftest.py", "type": "Module"}, {"nodeid": "tests/Part_1/__init__.py", "type": "Package"}, {"nodeid": "tests/Part_2_3/__init__.py", "type": "Package"}]}, {"nodeid": "tests/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/Part_1.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_1", "type": "Function", "lineno": 32}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_2", "type": "Function", "lineno": 39}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_3", "type": "Function", "lineno": 46}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_4", "type": "Function", "lineno": 53}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_5", "type": "Function", "lineno": 60}]}, {"nodeid": "tests/Part_1/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/__init__.py", "type": "Module"}, {"nodeid": "tests/Part_1/Part_1.py", "type": "Module"}, {"nodeid": "tests/Part_1/conftest.py", "type": "Module"}]}, {"nodeid": "tests/Part_2_3/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable::test_teacher_table_exists", "type": "Function", "lineno": 41}, {"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable::test_fields", "type": "Function", "lineno": 44}]}, {"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable", "type": "Instance"}]}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable::test_Student_table_exists", "type": "Function", "lineno": 64}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable::test_Student_fields", "type": "Function", "lineno": 67}]}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable", "type": "Instance"}]}, {"nodeid": "tests/Part_2_3/Part_2.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable", "type": "Class"}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable", "type": "Class"}, {"nodeid": "tests/Part_2_3/Part_2.py::test_part_2_question_query_4", "type": "Function", "lineno": 73}]}, {"nodeid": "tests/Part_2_3/Part_3.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_1", "type": "Function", "lineno": 30}, {"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_2", "type": "Function", "lineno": 33}, {"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_3", "type": "Function", "lineno": 36}]}, {"nodeid": "tests/Part_2_3/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_2_3/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2_3/__init__.py", "type": "Module"}, {"nodeid": "tests/Part_2_3/Part_2.py", "type": "Module"}, {"nodeid": "tests/Part_2_3/Part_3.py", "type": "Module"}, {"nodeid": "tests/Part_2_3/conftest.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_1", "lineno": 32, "outcome": "failed", "keywords": ["ds-sa-database-more", "test_part_1_question_1", "Part_1.py", "tests/Part_1/__init__.py"], "setup": {"duration": 0.010174699999999981, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \n"}, "call": {"duration": 0.001483499999999971, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_1\\Part_1.py", "lineno": 27, "message": "sqlite3.OperationalError: no such column: c.CoustomerID"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 37, "message": ""}, {"path": "tests\\Part_1\\Part_1.py", "lineno": 27, "message": "OperationalError"}], "longrepr": "def test_part_1_question_1():\n        \"\"\"\n        \uc785\ub825\ud55c \ucffc\ub9ac\uc5d0 \ub9de\ub294 \uacb0\uacfc\uc640 \ube44\uad50\ud558\ub294 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc785\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[0][0], TEST_PARAMS[0][1])\n\ntests\\Part_1\\Part_1.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p1q1.pkl'\nq = \"SELECT c.CoustomerID, c.City || ' ' || c.Country FROM Customers c;\"\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: no such column: c.CoustomerID\n\ntests\\Part_1\\Part_1.py:27: OperationalError"}, "teardown": {"duration": 0.00038479999999996295, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_2", "lineno": 39, "outcome": "failed", "keywords": ["ds-sa-database-more", "test_part_1_question_2", "tests/Part_1/__init__.py", "Part_1.py"], "setup": {"duration": 0.0005663000000000196, "outcome": "passed"}, "call": {"duration": 0.0005563000000000651, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_1\\Part_1.py", "lineno": 27, "message": "sqlite3.OperationalError: unrecognized token: \"2\ubc88\ubb38\uc81c\uc758\""}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 44, "message": ""}, {"path": "tests\\Part_1\\Part_1.py", "lineno": 27, "message": "OperationalError"}], "longrepr": "def test_part_1_question_2():\n        \"\"\"\n        \uc785\ub825\ud55c \ucffc\ub9ac\uc5d0 \ub9de\ub294 \uacb0\uacfc\uc640 \ube44\uad50\ud558\ub294 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc785\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[1][0], TEST_PARAMS[1][1])\n\ntests\\Part_1\\Part_1.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p1q2.pkl', q = '2\ubc88\ubb38\uc81c\uc758 \ub2f5\uc774 \ub418\ub294 SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574\uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: unrecognized token: \"2\ubc88\ubb38\uc81c\uc758\"\n\ntests\\Part_1\\Part_1.py:27: OperationalError"}, "teardown": {"duration": 0.00027449999999995534, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_3", "lineno": 46, "outcome": "failed", "keywords": ["ds-sa-database-more", "test_part_1_question_3", "Part_1.py", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0003906000000000187, "outcome": "passed"}, "call": {"duration": 0.00045210000000006634, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_1\\Part_1.py", "lineno": 27, "message": "sqlite3.OperationalError: unrecognized token: \"3\ubc88\ubb38\uc81c\uc758\""}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 51, "message": ""}, {"path": "tests\\Part_1\\Part_1.py", "lineno": 27, "message": "OperationalError"}], "longrepr": "def test_part_1_question_3():\n        \"\"\"\n        \uc785\ub825\ud55c \ucffc\ub9ac\uc5d0 \ub9de\ub294 \uacb0\uacfc\uc640 \ube44\uad50\ud558\ub294 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc785\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[2][0], TEST_PARAMS[2][1])\n\ntests\\Part_1\\Part_1.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p1q3.pkl', q = '3\ubc88\ubb38\uc81c\uc758 \ub2f5\uc774 \ub418\ub294 SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574\uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: unrecognized token: \"3\ubc88\ubb38\uc81c\uc758\"\n\ntests\\Part_1\\Part_1.py:27: OperationalError"}, "teardown": {"duration": 0.00028410000000000935, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_4", "lineno": 53, "outcome": "failed", "keywords": ["ds-sa-database-more", "test_part_1_question_4", "Part_1.py", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0003175000000000816, "outcome": "passed"}, "call": {"duration": 0.0006002999999999981, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_1\\Part_1.py", "lineno": 27, "message": "sqlite3.OperationalError: unrecognized token: \"4\ubc88\ubb38\uc81c\uc758\""}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 58, "message": ""}, {"path": "tests\\Part_1\\Part_1.py", "lineno": 27, "message": "OperationalError"}], "longrepr": "def test_part_1_question_4():\n        \"\"\"\n        \uc785\ub825\ud55c \ucffc\ub9ac\uc5d0 \ub9de\ub294 \uacb0\uacfc\uc640 \ube44\uad50\ud558\ub294 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc785\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[3][0], TEST_PARAMS[3][1])\n\ntests\\Part_1\\Part_1.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p1q4.pkl', q = '4\ubc88\ubb38\uc81c\uc758 \ub2f5\uc774 \ub418\ub294 SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574\uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: unrecognized token: \"4\ubc88\ubb38\uc81c\uc758\"\n\ntests\\Part_1\\Part_1.py:27: OperationalError"}, "teardown": {"duration": 0.0002910999999999886, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::test_part_1_question_5", "lineno": 60, "outcome": "failed", "keywords": ["ds-sa-database-more", "tests/Part_1/__init__.py", "Part_1.py", "test_part_1_question_5"], "setup": {"duration": 0.00037349999999991557, "outcome": "passed"}, "call": {"duration": 0.0004530000000000367, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_1\\Part_1.py", "lineno": 27, "message": "sqlite3.OperationalError: unrecognized token: \"5\ubc88\ubb38\uc81c\uc758\""}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 65, "message": ""}, {"path": "tests\\Part_1\\Part_1.py", "lineno": 27, "message": "OperationalError"}], "longrepr": "def test_part_1_question_5():\n        \"\"\"\n        \uc785\ub825\ud55c \ucffc\ub9ac\uc5d0 \ub9de\ub294 \uacb0\uacfc\uc640 \ube44\uad50\ud558\ub294 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4 \uc785\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[4][0], TEST_PARAMS[4][1])\n\ntests\\Part_1\\Part_1.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p1q5.pkl', q = '5\ubc88\ubb38\uc81c\uc758 \ub2f5\uc774 \ub418\ub294 SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574\uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: unrecognized token: \"5\ubc88\ubb38\uc81c\uc758\"\n\ntests\\Part_1\\Part_1.py:27: OperationalError"}, "teardown": {"duration": 0.001444299999999954, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}, {"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable::test_teacher_table_exists", "lineno": 41, "outcome": "failed", "keywords": ["test_teacher_table_exists", "Part_2.py", "TestTeachearTable", "()", "ds-sa-database-more", "tests/Part_2_3/__init__.py"], "setup": {"duration": 0.002004299999999959, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \nError occurred while executing Part 2 SQL\nnear \"\uc8fc\uc5b4\uc9c4\": syntax error\nINSERT \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4\nError occurred while executing Part 2 INSERT\nno such table: Student\nINSERT \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4\nError occurred while executing Part 2 INSERT\nnear \"QUERT_3_1\": syntax error\n"}, "call": {"duration": 0.00046400000000001995, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_2.py", "lineno": 44, "message": "assert 0 == 1\n  +0\n  -1"}, "traceback": [{"path": "tests\\Part_2_3\\Part_2.py", "lineno": 44, "message": "AssertionError"}], "longrepr": "self = <Part_2_3.Part_2.TestTeachearTable object at 0x000001DA64F15E50>\ntable_checker = <function table_checker.<locals>.returner at 0x000001DA646D4430>\n\n    def test_teacher_table_exists(self, table_checker):\n        # Teachear \ud14c\uc774\ube14\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n>       assert len(table_checker(self.__tablename__)) == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntests\\Part_2_3\\Part_2.py:44: AssertionError"}, "teardown": {"duration": 0.0003242999999999441, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_2.py::TestTeachearTable::test_fields", "lineno": 44, "outcome": "failed", "keywords": ["Part_2.py", "TestTeachearTable", "test_fields", "()", "ds-sa-database-more", "tests/Part_2_3/__init__.py"], "setup": {"duration": 0.0004488999999999743, "outcome": "passed"}, "call": {"duration": 0.0005208999999999353, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_2.py", "lineno": 47, "message": "assert 0 == 4\n  +0\n  -4"}, "traceback": [{"path": "tests\\Part_2_3\\Part_2.py", "lineno": 47, "message": "AssertionError"}], "longrepr": "self = <Part_2_3.Part_2.TestTeachearTable object at 0x000001DA64F1F2B0>\nfield_checker = <function field_checker.<locals>.returner at 0x000001DA646D4550>\n\n    def test_fields(self, field_checker):\n        # Teachear \ud14c\uc774\ube14 \uad6c\uc870\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n>       assert len(field_checker(self.__tablename__)) == 4\nE       assert 0 == 4\nE         +0\nE         -4\n\ntests\\Part_2_3\\Part_2.py:47: AssertionError"}, "teardown": {"duration": 0.0003178000000000347, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable::test_Student_table_exists", "lineno": 64, "outcome": "failed", "keywords": ["TestStudentTable", "Part_2.py", "test_Student_table_exists", "()", "ds-sa-database-more", "tests/Part_2_3/__init__.py"], "setup": {"duration": 0.0005144999999999733, "outcome": "passed"}, "call": {"duration": 0.0005028999999999728, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_2.py", "lineno": 67, "message": "assert 0 == 1\n  +0\n  -1"}, "traceback": [{"path": "tests\\Part_2_3\\Part_2.py", "lineno": 67, "message": "AssertionError"}], "longrepr": "self = <Part_2_3.Part_2.TestStudentTable object at 0x000001DA64F0DDC0>\ntable_checker = <function table_checker.<locals>.returner at 0x000001DA646D4670>\n\n    def test_Student_table_exists(self, table_checker):\n        # Student \ud14c\uc774\ube14\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n>       assert len(table_checker(self.__tablename__)) == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntests\\Part_2_3\\Part_2.py:67: AssertionError"}, "teardown": {"duration": 0.00031039999999993295, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_2.py::TestStudentTable::test_Student_fields", "lineno": 67, "outcome": "failed", "keywords": ["TestStudentTable", "Part_2.py", "()", "ds-sa-database-more", "test_Student_fields", "tests/Part_2_3/__init__.py"], "setup": {"duration": 0.0005273000000000083, "outcome": "passed"}, "call": {"duration": 0.00041199999999996795, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_2.py", "lineno": 70, "message": "assert 0 == 3\n  +0\n  -3"}, "traceback": [{"path": "tests\\Part_2_3\\Part_2.py", "lineno": 70, "message": "AssertionError"}], "longrepr": "self = <Part_2_3.Part_2.TestStudentTable object at 0x000001DA64F1FA30>\nfield_checker = <function field_checker.<locals>.returner at 0x000001DA646D4CA0>\n\n    def test_Student_fields(self, field_checker):\n        # Student \ud14c\uc774\ube14 \uad6c\uc870\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n>       assert len(field_checker(self.__tablename__)) == 3\nE       assert 0 == 3\nE         +0\nE         -3\n\ntests\\Part_2_3\\Part_2.py:70: AssertionError"}, "teardown": {"duration": 0.00034400000000001096, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_2.py::test_part_2_question_query_4", "lineno": 73, "outcome": "failed", "keywords": ["tests/Part_2_3/__init__.py", "test_part_2_question_query_4", "Part_2.py", "ds-sa-database-more"], "setup": {"duration": 0.00036719999999990094, "outcome": "passed"}, "call": {"duration": 0.0004605999999999222, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_2.py", "lineno": 21, "message": "sqlite3.OperationalError: near \"Urclass\uc758\": syntax error"}, "traceback": [{"path": "tests\\Part_2_3\\Part_2.py", "lineno": 78, "message": ""}, {"path": "tests\\Part_2_3\\Part_2.py", "lineno": 21, "message": "OperationalError"}], "longrepr": "def test_part_2_question_query_4():\n        \"\"\"\n        src/Part_2 \uc758 QUERY_4 \uac00 \ubb38\uc81c\uc758 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\uac8c \uc2e4\ud589\ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n        \"\"\"\n>       query_tester(TEST_PARAMS[0][0], TEST_PARAMS[0][1])\n\ntests\\Part_2_3\\Part_2.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q4.pkl', q = 'Urclass\uc758 \uacfc\uc81c \uc124\uba85\uc5d0 \uc81c\uacf5\ub41c \uc774\ubbf8\uc9c0\uc640 \uac19\uc740 \uacb0\uacfc\uac12\uc744 \ucd9c\ub825\ud558\ub294 \ucffc\ub9ac\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"Urclass\uc758\": syntax error\n\ntests\\Part_2_3\\Part_2.py:21: OperationalError"}, "teardown": {"duration": 0.0011646999999999075, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}, {"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_1", "lineno": 30, "outcome": "failed", "keywords": ["tests/Part_2_3/__init__.py", "ds-sa-database-more", "Part_3.py", "test_part_3_question_1"], "setup": {"duration": 0.0011921999999999766, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \nError occurred while executing Part 2 SQL\nnear \"\uc8fc\uc5b4\uc9c4\": syntax error\nINSERT \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4\nError occurred while executing Part 2 INSERT\nno such table: Student\nINSERT \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4\nError occurred while executing Part 2 INSERT\nnear \"QUERT_3_1\": syntax error\n"}, "call": {"duration": 0.0004501999999999562, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "sqlite3.OperationalError: near \"\uccab\": syntax error"}, "traceback": [{"path": "tests\\Part_2_3\\Part_3.py", "lineno": 32, "message": ""}, {"path": "tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "OperationalError"}], "longrepr": "def test_part_3_question_1():\n>       query_tester(TEST_PARAMS[0][0], TEST_PARAMS[0][1])\n\ntests\\Part_2_3\\Part_3.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q1.pkl', q = '\uccab \ubc88\uc9f8 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud55c \ub2f5\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"\uccab\": syntax error\n\ntests\\Part_2_3\\Part_3.py:25: OperationalError"}, "teardown": {"duration": 0.00025620000000003973, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_2", "lineno": 33, "outcome": "failed", "keywords": ["tests/Part_2_3/__init__.py", "ds-sa-database-more", "Part_3.py", "test_part_3_question_2"], "setup": {"duration": 0.0003588999999999398, "outcome": "passed"}, "call": {"duration": 0.0004939000000000471, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "sqlite3.OperationalError: near \"\ub450\": syntax error"}, "traceback": [{"path": "tests\\Part_2_3\\Part_3.py", "lineno": 35, "message": ""}, {"path": "tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "OperationalError"}], "longrepr": "def test_part_3_question_2():\n>       query_tester(TEST_PARAMS[1][0], TEST_PARAMS[1][1])\n\ntests\\Part_2_3\\Part_3.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q2.pkl', q = '\ub450 \ubc88\uc9f8 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud55c \ub2f5\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"\ub450\": syntax error\n\ntests\\Part_2_3\\Part_3.py:25: OperationalError"}, "teardown": {"duration": 0.00039250000000001783, "outcome": "passed"}}, {"nodeid": "tests/Part_2_3/Part_3.py::test_part_3_question_3", "lineno": 36, "outcome": "failed", "keywords": ["tests/Part_2_3/__init__.py", "test_part_3_question_3", "Part_3.py", "ds-sa-database-more"], "setup": {"duration": 0.00042120000000001045, "outcome": "passed"}, "call": {"duration": 0.0004667000000000421, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database-more\\tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "sqlite3.OperationalError: near \"\uc138\": syntax error"}, "traceback": [{"path": "tests\\Part_2_3\\Part_3.py", "lineno": 38, "message": ""}, {"path": "tests\\Part_2_3\\Part_3.py", "lineno": 25, "message": "OperationalError"}], "longrepr": "def test_part_3_question_3():\n>       query_tester(TEST_PARAMS[2][0], TEST_PARAMS[2][1])\n\ntests\\Part_2_3\\Part_3.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q3.pkl', q = '\uc138 \ubc88\uc9f8 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud55c \ub2f5\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"\uc138\": syntax error\n\ntests\\Part_2_3\\Part_3.py:25: OperationalError"}, "teardown": {"duration": 0.0012068000000000634, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}]}