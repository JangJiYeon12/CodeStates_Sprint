{"created": 1649924002.6806505, "duration": 0.35699987411499023, "exitcode": 1, "root": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database", "environment": {"Python": "3.8.13", "Platform": "Windows-10-10.0.19043-SP0", "Packages": {"pytest": "6.2.2", "py": "1.10.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.5.0", "metadata": "2.0.1", "submit": "1.3.3"}}, "summary": {"failed": 19, "total": 19, "collected": 19}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/conftest.py", "type": "Module"}, {"nodeid": "tests/Part_1/__init__.py", "type": "Package"}, {"nodeid": "tests/Part_2/__init__.py", "type": "Package"}, {"nodeid": "tests/Part_3/__init__.py", "type": "Package"}]}, {"nodeid": "tests/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable::test_table_exists", "type": "Function", "lineno": 19}, {"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable::test_fields", "type": "Function", "lineno": 22}]}, {"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable", "type": "Instance"}]}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestPackageTable::test_table_exists", "type": "Function", "lineno": 40}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable::test_fields", "type": "Function", "lineno": 43}]}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestPackageTable", "type": "Instance"}]}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestJoinTable::test_table_exists", "type": "Function", "lineno": 62}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable::test_fields", "type": "Function", "lineno": 65}]}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestJoinTable", "type": "Instance"}]}, {"nodeid": "tests/Part_1/Part_1.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable", "type": "Class"}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable", "type": "Class"}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable", "type": "Class"}]}, {"nodeid": "tests/Part_1/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_1/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/__init__.py", "type": "Module"}, {"nodeid": "tests/Part_1/Part_1.py", "type": "Module"}, {"nodeid": "tests/Part_1/conftest.py", "type": "Module"}]}, {"nodeid": "tests/Part_2/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_2/Part_2.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2/Part_2.py::test_question_1", "type": "Function", "lineno": 38}, {"nodeid": "tests/Part_2/Part_2.py::test_question_2", "type": "Function", "lineno": 42}, {"nodeid": "tests/Part_2/Part_2.py::test_question_3", "type": "Function", "lineno": 46}, {"nodeid": "tests/Part_2/Part_2.py::test_question_4", "type": "Function", "lineno": 50}, {"nodeid": "tests/Part_2/Part_2.py::test_question_5", "type": "Function", "lineno": 54}, {"nodeid": "tests/Part_2/Part_2.py::test_question_6", "type": "Function", "lineno": 58}, {"nodeid": "tests/Part_2/Part_2.py::test_question_7", "type": "Function", "lineno": 62}, {"nodeid": "tests/Part_2/Part_2.py::test_question_8", "type": "Function", "lineno": 66}, {"nodeid": "tests/Part_2/Part_2.py::test_question_9", "type": "Function", "lineno": 70}, {"nodeid": "tests/Part_2/Part_2.py::test_question_10", "type": "Function", "lineno": 74}]}, {"nodeid": "tests/Part_2/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_2/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2/__init__.py", "type": "Module"}, {"nodeid": "tests/Part_2/Part_2.py", "type": "Module"}, {"nodeid": "tests/Part_2/conftest.py", "type": "Module"}]}, {"nodeid": "tests/Part_3/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_3/Part_3.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_3/Part_3.py::test_question_1", "type": "Function", "lineno": 31}, {"nodeid": "tests/Part_3/Part_3.py::test_question_2", "type": "Function", "lineno": 35}, {"nodeid": "tests/Part_3/Part_3.py::test_question_3", "type": "Function", "lineno": 39}]}, {"nodeid": "tests/Part_3/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_3/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_3/__init__.py", "type": "Module"}, {"nodeid": "tests/Part_3/Part_3.py", "type": "Module"}, {"nodeid": "tests/Part_3/conftest.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable::test_table_exists", "lineno": 19, "outcome": "failed", "keywords": ["test_table_exists", "Part_1.py", "TestCustomerTable", "ds-sa-database", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0026439999999999797, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \nError occurred while executing Part 1 SQL\nno such table: customers\n"}, "call": {"duration": 0.0007298000000000027, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 21, "message": "assert 0 == 1\n  +0\n  -1"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 21, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestCustomerTable object at 0x000001DFD916EA90>\ntable_checker = <function table_checker.<locals>.returner at 0x000001DFD91808B0>\n\n    def test_table_exists(self, table_checker):\n>       assert len(table_checker(self.__tablename__)) == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntests\\Part_1\\Part_1.py:21: AssertionError"}, "teardown": {"duration": 0.0004701999999999762, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::TestCustomerTable::test_fields", "lineno": 22, "outcome": "failed", "keywords": ["Part_1.py", "TestCustomerTable", "ds-sa-database", "test_fields", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.000697100000000006, "outcome": "passed"}, "call": {"duration": 0.0007302999999999615, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 24, "message": "assert 0 == 3\n  +0\n  -3"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 24, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestCustomerTable object at 0x000001DFD918AF10>\nfield_checker = <function field_checker.<locals>.returner at 0x000001DFD91809D0>\n\n    def test_fields(self, field_checker):\n>       assert len(field_checker(self.__tablename__)) == 3\nE       assert 0 == 3\nE         +0\nE         -3\n\ntests\\Part_1\\Part_1.py:24: AssertionError"}, "teardown": {"duration": 0.00044309999999991856, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable::test_table_exists", "lineno": 40, "outcome": "failed", "keywords": ["TestPackageTable", "test_table_exists", "Part_1.py", "ds-sa-database", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0006327999999999889, "outcome": "passed"}, "call": {"duration": 0.0007911999999999919, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 42, "message": "assert 0 == 1\n  +0\n  -1"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 42, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestPackageTable object at 0x000001DFD99D8760>\ntable_checker = <function table_checker.<locals>.returner at 0x000001DFD91CC3A0>\n\n    def test_table_exists(self, table_checker):\n>       assert len(table_checker('Package')) == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntests\\Part_1\\Part_1.py:42: AssertionError"}, "teardown": {"duration": 0.0004117999999999622, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::TestPackageTable::test_fields", "lineno": 43, "outcome": "failed", "keywords": ["TestPackageTable", "Part_1.py", "ds-sa-database", "test_fields", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0007285000000000208, "outcome": "passed"}, "call": {"duration": 0.0007148000000000154, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 45, "message": "assert 0 == 3\n  +0\n  -3"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 45, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestPackageTable object at 0x000001DFD99F2520>\nfield_checker = <function field_checker.<locals>.returner at 0x000001DFD91CC5E0>\n\n    def test_fields(self, field_checker):\n>       assert len(field_checker(self.__tablename__)) == 3\nE       assert 0 == 3\nE         +0\nE         -3\n\ntests\\Part_1\\Part_1.py:45: AssertionError"}, "teardown": {"duration": 0.0006185999999999137, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable::test_table_exists", "lineno": 62, "outcome": "failed", "keywords": ["TestJoinTable", "test_table_exists", "Part_1.py", "ds-sa-database", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0004677999999999072, "outcome": "passed"}, "call": {"duration": 0.0009637000000000118, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 64, "message": "assert 0 == 1\n  +0\n  -1"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 64, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestJoinTable object at 0x000001DFD99D8A00>\ntable_checker = <function table_checker.<locals>.returner at 0x000001DFD91CC790>\n\n    def test_table_exists(self, table_checker):\n>       assert len(table_checker(self.__tablename__)) == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntests\\Part_1\\Part_1.py:64: AssertionError"}, "teardown": {"duration": 0.00037609999999999033, "outcome": "passed"}}, {"nodeid": "tests/Part_1/Part_1.py::TestJoinTable::test_fields", "lineno": 65, "outcome": "failed", "keywords": ["TestJoinTable", "Part_1.py", "ds-sa-database", "test_fields", "()", "tests/Part_1/__init__.py"], "setup": {"duration": 0.0004226999999999981, "outcome": "passed"}, "call": {"duration": 0.0006026000000000087, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_1\\Part_1.py", "lineno": 67, "message": "assert 0 == 3\n  +0\n  -3"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 67, "message": "AssertionError"}], "longrepr": "self = <Part_1.Part_1.TestJoinTable object at 0x000001DFD9A004C0>\nfield_checker = <function field_checker.<locals>.returner at 0x000001DFD91CC4C0>\n\n    def test_fields(self, field_checker):\n>       assert len(field_checker(self.__tablename__)) == 3\nE       assert 0 == 3\nE         +0\nE         -3\n\ntests\\Part_1\\Part_1.py:67: AssertionError"}, "teardown": {"duration": 0.0016412000000000093, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_1", "lineno": 38, "outcome": "failed", "keywords": ["Part_2.py", "ds-sa-database", "test_question_1", "tests/Part_2/__init__.py"], "setup": {"duration": 0.01000230000000002, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \n"}, "call": {"duration": 0.0007277999999999452, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 40, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_1():\n>       query_tester(TEST_PARAMS[0][0], TEST_PARAMS[0][1])\n\ntests\\Part_2\\Part_2.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q1.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00036479999999994295, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_2", "lineno": 42, "outcome": "failed", "keywords": ["test_question_2", "Part_2.py", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0003843000000000041, "outcome": "passed"}, "call": {"duration": 0.00047989999999997757, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 44, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_2():\n>       query_tester(TEST_PARAMS[1][0], TEST_PARAMS[1][1])\n\ntests\\Part_2\\Part_2.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q2.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.0007408999999999333, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_3", "lineno": 46, "outcome": "failed", "keywords": ["Part_2.py", "ds-sa-database", "test_question_3", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0005766000000000382, "outcome": "passed"}, "call": {"duration": 0.000654700000000008, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 48, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_3():\n>       query_tester(TEST_PARAMS[2][0], TEST_PARAMS[2][1])\n\ntests\\Part_2\\Part_2.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q3.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00039250000000001783, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_4", "lineno": 50, "outcome": "failed", "keywords": ["test_question_4", "Part_2.py", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.00047310000000000407, "outcome": "passed"}, "call": {"duration": 0.0005867000000000511, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 52, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_4():\n>       query_tester(TEST_PARAMS[3][0], TEST_PARAMS[3][1])\n\ntests\\Part_2\\Part_2.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q4.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00035719999999994645, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_5", "lineno": 54, "outcome": "failed", "keywords": ["Part_2.py", "ds-sa-database", "test_question_5", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0004077999999999582, "outcome": "passed"}, "call": {"duration": 0.0004410000000000247, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 56, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_5():\n>       query_tester(TEST_PARAMS[4][0], TEST_PARAMS[4][1])\n\ntests\\Part_2\\Part_2.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q5.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.0004132999999999498, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_6", "lineno": 58, "outcome": "failed", "keywords": ["Part_2.py", "ds-sa-database", "test_question_6", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0005496999999999863, "outcome": "passed"}, "call": {"duration": 0.000634699999999988, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 60, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_6():\n>       query_tester(TEST_PARAMS[5][0], TEST_PARAMS[5][1])\n\ntests\\Part_2\\Part_2.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q6.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00030439999999998246, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_7", "lineno": 62, "outcome": "failed", "keywords": ["Part_2.py", "test_question_7", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.00032639999999994895, "outcome": "passed"}, "call": {"duration": 0.0006543999999999439, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 64, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_7():\n>       query_tester(TEST_PARAMS[6][0], TEST_PARAMS[6][1])\n\ntests\\Part_2\\Part_2.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q7.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00032359999999997946, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_8", "lineno": 66, "outcome": "failed", "keywords": ["test_question_8", "Part_2.py", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0003476999999998398, "outcome": "passed"}, "call": {"duration": 0.00045570000000005884, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 68, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_8():\n>       query_tester(TEST_PARAMS[7][0], TEST_PARAMS[7][1])\n\ntests\\Part_2\\Part_2.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q8.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.00032049999999994583, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_9", "lineno": 70, "outcome": "failed", "keywords": ["Part_2.py", "test_question_9", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0005162000000000777, "outcome": "passed"}, "call": {"duration": 0.0006016999999998163, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 72, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_9():\n>       query_tester(TEST_PARAMS[8][0], TEST_PARAMS[8][1])\n\ntests\\Part_2\\Part_2.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q9.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.0003349999999999742, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_question_10", "lineno": 74, "outcome": "failed", "keywords": ["Part_2.py", "test_question_10", "ds-sa-database", "tests/Part_2/__init__.py"], "setup": {"duration": 0.0003526000000000362, "outcome": "passed"}, "call": {"duration": 0.0005573999999999302, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_2\\Part_2.py", "lineno": 33, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 76, "message": ""}, {"path": "tests\\Part_2\\Part_2.py", "lineno": 33, "message": "OperationalError"}], "longrepr": "def test_question_10():\n>       query_tester(TEST_PARAMS[9][0], TEST_PARAMS[9][1])\n\ntests\\Part_2\\Part_2.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p2q10.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_2\\Part_2.py:33: OperationalError"}, "teardown": {"duration": 0.0015585000000000182, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}, {"nodeid": "tests/Part_3/Part_3.py::test_question_1", "lineno": 31, "outcome": "failed", "keywords": ["tests/Part_3/__init__.py", "ds-sa-database", "Part_3.py", "test_question_1"], "setup": {"duration": 0.007334199999999846, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Setting up...\n        -------------------------------------\n        \n"}, "call": {"duration": 0.0004889000000001253, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_3\\Part_3.py", "lineno": 26, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_3\\Part_3.py", "lineno": 33, "message": ""}, {"path": "tests\\Part_3\\Part_3.py", "lineno": 26, "message": "OperationalError"}], "longrepr": "def test_question_1():\n>       query_tester(TEST_PARAMS[0][0], TEST_PARAMS[0][1])\n\ntests\\Part_3\\Part_3.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q1.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_3\\Part_3.py:26: OperationalError"}, "teardown": {"duration": 0.000290400000000135, "outcome": "passed"}}, {"nodeid": "tests/Part_3/Part_3.py::test_question_2", "lineno": 35, "outcome": "failed", "keywords": ["tests/Part_3/__init__.py", "test_question_2", "Part_3.py", "ds-sa-database"], "setup": {"duration": 0.00033050000000001134, "outcome": "passed"}, "call": {"duration": 0.0004541000000000128, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_3\\Part_3.py", "lineno": 26, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_3\\Part_3.py", "lineno": 37, "message": ""}, {"path": "tests\\Part_3\\Part_3.py", "lineno": 26, "message": "OperationalError"}], "longrepr": "def test_question_2():\n>       query_tester(TEST_PARAMS[1][0], TEST_PARAMS[1][1])\n\ntests\\Part_3\\Part_3.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q2.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_3\\Part_3.py:26: OperationalError"}, "teardown": {"duration": 0.00026860000000006323, "outcome": "passed"}}, {"nodeid": "tests/Part_3/Part_3.py::test_question_3", "lineno": 39, "outcome": "failed", "keywords": ["tests/Part_3/__init__.py", "ds-sa-database", "Part_3.py", "test_question_3"], "setup": {"duration": 0.0006937000000000193, "outcome": "passed"}, "call": {"duration": 0.0004995000000000971, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sa-database\\tests\\Part_3\\Part_3.py", "lineno": 26, "message": "sqlite3.OperationalError: near \"SQL\": syntax error"}, "traceback": [{"path": "tests\\Part_3\\Part_3.py", "lineno": 41, "message": ""}, {"path": "tests\\Part_3\\Part_3.py", "lineno": 26, "message": "OperationalError"}], "longrepr": "def test_question_3():\n>       query_tester(TEST_PARAMS[2][0], TEST_PARAMS[2][1])\n\ntests\\Part_3\\Part_3.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile_name = 'p3q3.pkl', q = 'SQL \ucffc\ub9ac\ubb38\uc744 \uc791\uc131\ud574 \uc8fc\uc138\uc694.'\n\n    def query_tester(file_name, q):\n        test_res = get_pkl(file_name)\n>       res = pytest.cur.execute(q).fetchall()\nE       sqlite3.OperationalError: near \"SQL\": syntax error\n\ntests\\Part_3\\Part_3.py:26: OperationalError"}, "teardown": {"duration": 0.0013100999999999807, "outcome": "passed", "stdout": "\n        -------------------------------------\n        Tearing down...\n        -------------------------------------\n        \n"}}]}